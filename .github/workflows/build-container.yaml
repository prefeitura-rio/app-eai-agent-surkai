name: Build and Push image

on:
  push:
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - if: ${{ github.ref == 'refs/heads/staging' }}
      #   uses: SonarSource/sonarqube-scan-action@v4
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Check disk space before build
        run: |
          echo "=== Espaço em disco disponível ==="
          df -h
          echo "=== Espaço em /tmp ==="
          du -sh /tmp/* 2>/dev/null || true
          echo "=== Docker system info ==="
          docker system df || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync

      - name: Generate Swagger Documentation
        run: |
          chmod +x scripts/generate_swagger_docs.py
          uv run python scripts/generate_swagger_docs.py

      - name: Commit Swagger Documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/swagger/swagger.json
          
          # Só commita se houve mudanças
          if git diff --staged --quiet; then
            echo "Nenhuma mudança na documentação Swagger detectada."
          else
            git commit -m "docs: atualiza documentação Swagger automaticamente"
            git push
            echo "✅ Documentação Swagger atualizada e commitada!"
          fi

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Extract metadata for Docker tags
        id: meta
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/app-eai-agent-surkai"
          if [ "${GITHUB_REF##*/}" == "main" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAG1="stable"
            TAG2="$COMMIT_HASH"
          elif [ "${GITHUB_REF##*/}" == "staging" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAG1="latest"
            TAG2="$COMMIT_HASH"
          fi
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TAG1=$TAG1" >> $GITHUB_ENV
          echo "TAG2=$TAG2" >> $GITHUB_ENV

      - name: Clean up before Docker build
        run: |
          # Remove arquivos temporários desnecessários
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          
          # Limpar cache do uv se existir
          uv cache clean || true
          
          # Limpar cache do pip se existir
          pip cache purge || true
          
          # Verificar espaço disponível após limpeza
          echo "=== Espaço após limpeza ==="
          df -h

      - name: Build and Push Docker Image using Buildx
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            --tag $IMAGE_NAME:$TAG1 \
            --tag $IMAGE_NAME:$TAG2 \
            --push .

      - name: Clean up Docker resources
        if: always()
        run: |
          # Limpar recursos do Docker para liberar espaço
          docker system prune -af --volumes || true
          docker builder prune -af || true